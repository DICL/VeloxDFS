#!/bin/env ruby
# vim: ft=ruby : fileencoding=utf-8 : foldmethod=marker : set autoindent

require 'json'              # 
require 'optparse'          # For parsing the options

module EclipseDaemon
  CONFPATH = "@sysconfdirfull@/eclipse.json"
  # find_confpath {{{
  def find_confpath
    home = "#{ENV['HOME']}/.eclipse.json"
    etc  = "/etc/.eclipse.json"

    if File.exists? home
      return home
    elsif File.exists? etc
      return etc
    else
      return CONFPATH
    end 
  end
  # }}}

  class Core 
    include EclipseDaemon
    # Initialize {{{
    def initialize (file, range)
      @configfile = File.open(find_confpath) { |f| JSON.parse(f.read) }
      @nodelist = @configfile['network']['nodes']
      @nodelist = @nodelist[0..(range - 1)]
      @configfile['network']['nodes'] = @nodelist
      @verbose  = false
      @file = file
      @range = range 
    end

    # }}}
    # launch {{{
    def launch
      @nodelist.each do |node|
        cmd = "ssh #{node} 'nohup #{@file} #{JSON.generate(@configfile).dump} </dev/null &>/dev/null & exit'"
        puts cmd
        system cmd
      end
    end 

    #}}}
    # debug {{{
    def debug 
      @nodelist.drop(1).each do |node|
        cmd = "ssh #{node} 'nohup #{@file} #{JSON.generate(@configfile).dump} </dev/null &>/dev/null & exit'"
        puts cmd
        system cmd
      end
      exec "gdb --args #{@file} #{JSON.generate(@configfile).dump}"
    end 

    #}}}
    # debug_at {{{
    def debug_at(index) 
      i = 0
      @nodelist.each do |node|
        if i != index.to_i then
          cmd = "ssh #{node} 'nohup #{@file} #{JSON.generate(@configfile).dump} </dev/null &>/dev/null & exit'"
          puts cmd
          system cmd
        end
        i = i + 1
      end
      cmd  = "ssh #{@nodelist[index.to_i]} \'gdb --args #{@file} #{JSON.generate(@configfile).dump}\'"
      puts cmd 
      exec cmd
    end 
    #}}}
    # unique {{{
    def unique 
      @nodelist.each do |node|
        cmd = "#{@file} #{JSON.generate(@configfile).dump}"
        puts cmd
        system cmd
      end
    end 

    #}}}
    # close {{{
    def close
      @nodelist.each do |node|
        `ssh #{node} pkill -u #{`whoami`.chomp} #{File.basename(@file)}`
      end 
    end #}}}
    # kill {{{
    def kill(input)
      @nodelist.each do |node|
        cmd = "ssh #{node} \'pkill -u #{`whoami`.chomp} #{input.join}\'"
        puts cmd if @verbose
        system cmd
      end
    end #}}}
    # pry {{{
    def pry 
      require 'pry'
      binding.pry
    end #}}}
  end

  class CLI_driver < Core
    def initialize file:, range:, input:  #{{{
      @options = {}
      super(file, range)
      OptionParser.new do |opts|
        opts.banner = "ecfs (Eclipse FileSystem) is an script to manage the fs\n" +
          "Usage: ecfs [options] <actions> [FILE]..."
        opts.version = 1.0
        opts.program_name = "Eclipse Launcher"
        opts.separator "Core actions"
        opts.separator "    launch       Create new Eclipse network"
        opts.separator "    close        Close the network"
        opts.separator "    status       Check the status of the network"
        opts.separator "    submit       Submit application"
        opts.separator "    kill         kill application in each node"
      end.parse! input

      case input.shift
      when 'launch' then launch 
      when 'unique' then unique 
      when 'debug' then debug
      when 'debug_at' then debug_at input[0]
      when 'close' then  close
      when 'status' then show
      when 'kill' then   kill input
      else               raise "Not action given"
      end
    end #}}}
  end
end
